{"version":3,"sources":["Services/ApiService.js","Components/BlogItemComponent.js","Components/MarkdownToHtmlComponent.js","Components/BlogPostComponent.js","Components/BlogItemListComponent.js","Components/BodyComponent.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ApiService","url","fetch","then","response","json","data","BlogItemComponent","props","blogItem","react_default","a","createElement","class","key","blog","position","src","alt","day","month","href","title","info","id","MarkdownToHtmlComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contentText","react_markdown_default","source","React","Component","BlogPostComponent","blogPost","year","Components_MarkdownToHtmlComponent","body","BlogItemListComponent","console","log","blogs","length","blogsList","map","items","item","Components_BlogItemComponent","blogsDetailList","Components_BlogPostComponent","BodyContainer","monthNames","bindBlogItemsToDomElement","_this2","getData","count","i","substring","createdOnDate","Date","created_at","milestone","description","due_on","createdOn","getDate","getMonth","getFullYear","push","sessionStorage","setItem","JSON","stringify","setState","_blogs","getItem","parse","getBlogList","Components_BlogItemListComponent","App","BodyComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.6a4c9b80.chunk.js","sourcesContent":["export default class ApiService {\r\n\r\n  getData(url) {\r\n\r\n    return fetch(url)\r\n      // Get the response\r\n      // If we want text, call response.text()\r\n      .then(response => response.json()\r\n      )\r\n      .then((data) => {\r\n        // Do something with the response       \r\n        return data;\r\n      });\r\n\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst BlogItemComponent = (props) => {\r\n\r\n  const blogItem = (\r\n\r\n    <div class=\"item\" key={props.blog.position}>\r\n\r\n      {/* image */}\r\n      <div class=\"img\">\r\n        <img src=\"\" alt=\"\" />\r\n      </div>\r\n\r\n      {/* info */}\r\n      <div class=\"info\">\r\n\r\n        <div class=\"date\">\r\n          <span> {props.blog.day} <br /> {props.blog.month}</span>\r\n        </div>\r\n\r\n        <a href=\"#{props.blog.id}\">\r\n          <h3>{props.blog.title}</h3>\r\n        </a>\r\n\r\n        <p>{props.blog.info}</p>\r\n\r\n        <a href=\"https://github.com/abhi-debuginside\" class=\"user\"><i class=\"fas fa-user\"></i>Admin</a>\r\n        <a href={(\"#\" + props.blog.id)} class=\"more\"><i class=\"fas fa-long-arrow-alt-right\"></i></a>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  )\r\n\r\n  return <div class=\"col-md-6 col-lg-4\">{blogItem}</div>\r\n}\r\n\r\nexport default BlogItemComponent","import React from 'react';\r\nimport Markdown from 'react-markdown';\r\n\r\nclass MarkdownToHtmlComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contentText: this.props.contentText\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (<Markdown source={this.state.contentText} />);\r\n  }\r\n\r\n}\r\n\r\nexport default MarkdownToHtmlComponent;","import React from 'react';\nimport MarkdownToHtml from '../Components/MarkdownToHtmlComponent';\n\nconst BlogPostComponent = (props) => {\n\n    const blogPost = (\n\n        <div class=\"col-md-12 col-lg-12\" id={props.blog.id} >\n\n            {/* image */}\n            <div class=\"img\">\n                <img src=\"\" alt=\"\" />\n            </div>\n\n            {/* info */}\n            <div class=\"info\">\n                <p class=\"post-date\"> {props.blog.day} {props.blog.month}, {props.blog.year}</p>\n\n                <h3>{props.blog.title}</h3>\n                <MarkdownToHtml contentText={props.blog.body} />\n            </div>\n\n        </div>\n\n    )\n\n    return <div class=\"row text-left\" >{blogPost}</div>\n}\n\nexport default BlogPostComponent","import React from 'react';\nimport BlogItem from '../Components/BlogItemComponent';\nimport BlogPost from '../Components/BlogPostComponent';\n\nconst BlogItemListComponent = (props) => {\n\n  console.log(\"props.blogs.length \" + props.blogs.length);\n\n  const blogsList = props.blogs.map((blog) => {\n    return (\n      <div class=\"row blog-item-card\">\n        {\n\n          blog.items.map((item) => {\n\n            return (\n              <BlogItem blog={item} />\n            )\n\n          })}\n      </div>\n    )\n\n  });\n\n  const blogsDetailList = props.blogs.map((blog) => {\n    return (\n      blog.items.map((item) => {\n\n        return (\n          <BlogPost blog={item} />\n        )\n      })\n    )\n\n  });\n\n\n  return (\n\n    <div class=\"container\">\n\n      {/* header of section */}\n      <div class=\"blog-head text-center\">\n        <h2>Debug Inside</h2>\n        <h6>Simplicity is the most complicated thing,<br /> until we learn how to break down the complexity.....</h6>\n      </div>\n\n      {/*<!-- blog items */}\n      {blogsList}\n\n      {/** blog content detail/body */}\n      {blogsDetailList}\n    </div>\n\n  );\n}\n\nexport default BlogItemListComponent","import React from 'react';\r\nimport ApiService from '../Services/ApiService';\r\nimport BlogItemList from '../Components/BlogItemListComponent';\r\n\r\nclass BodyContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      blogs: []\r\n    };\r\n\r\n    //this.getBlogList();\r\n\r\n  }\r\n\r\n  blogs = [];\r\n  monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n  componentDidMount() {\r\n    this.bindBlogItemsToDomElement();\r\n  }\r\n\r\n  getBlogList() {\r\n    console.log(\"calling getBlogList\");\r\n    const apiService = new ApiService();\r\n    const url = 'https://api.github.com/repos/abhi-debuginside/blog/issues?state=closed';\r\n    //const url = 'https://api.github.com/repos/abhi-debuginside/abhi-debuginside.github.io/issues';\r\n\r\n    var result = apiService.getData(url);\r\n\r\n    result.then((data) => {\r\n      let position = 1;\r\n      let count = 1;\r\n      let items = [];\r\n      console.log(\"data.length : \" + data.length);\r\n      for (let i = 0; i < data.length; i++) {\r\n        position = i + 1;\r\n        if (count <= 3) {\r\n          console.log(\" blog.title : \" + data[i].title);\r\n          //console.log(\"count : \" + count);\r\n\r\n          let info = data[i].body.substring(0, 150);\r\n          let createdOnDate = new Date(data[i].created_at);\r\n\r\n          if (data[i].milestone) {\r\n            if (data[i].milestone.description) {\r\n              info = data[i].milestone.description;\r\n            }\r\n\r\n            if (data[i].milestone.due_on) {\r\n              createdOnDate = new Date(data[i].milestone.due_on);\r\n            }\r\n          }\r\n          let createdOn = {\r\n            day: createdOnDate.getDate(),\r\n            month: this.monthNames[createdOnDate.getMonth()],\r\n            year: createdOnDate.getFullYear()\r\n          };\r\n\r\n          items.push(\r\n            {\r\n              position: position,\r\n              id: data[i].id,\r\n              title: data[i].title,\r\n              body: data[i].body,\r\n              info: info,\r\n              createdOnDate: createdOnDate,\r\n              day: createdOn.day,\r\n              month: createdOn.month,\r\n              year: createdOn.year\r\n            });\r\n\r\n          console.log(\"items for count - \" + count);\r\n          console.log(items);\r\n          count++;\r\n        }\r\n\r\n        if (count > 3) {\r\n          console.log(\"reset for count called\" + count);\r\n\r\n          //reset\r\n          count = 1;\r\n\r\n          // pushing to blog array\r\n          this.blogs.push({ items: items });\r\n          console.log(\"Pushed to blogs on reset section at index : \" + i);\r\n          console.log(this.blogs);\r\n          items = [];\r\n        }\r\n\r\n        console.log(\"index : \" + i);\r\n        if (position === data.length && items.length > 0) {\r\n          this.blogs.push({ items: items });\r\n          console.log(\"Pushed to blogs at index : \" + i);\r\n        }\r\n      }\r\n      console.log(\"this.blogs : \");\r\n      console.log(this.blogs);\r\n      sessionStorage.setItem(\"blogs\", JSON.stringify(this.blogs));\r\n      this.setState({ blogs: this.blogs });\r\n\r\n    });\r\n  }\r\n\r\n  bindBlogItemsToDomElement() {\r\n    var _blogs = sessionStorage.getItem(\"blogs\");\r\n    if (_blogs) {\r\n      //   console.log(\"_blogs :\" + _blogs);\r\n      this.blogs = JSON.parse(_blogs);\r\n      this.setState({ blogs: this.blogs });\r\n    }\r\n    else {\r\n      this.getBlogList();\r\n      // this.blogs = [\r\n      //   {\r\n      //     items: [\r\n      //       {\r\n      //         position: 1,\r\n      //         title: 'Test Blog 1',\r\n      //         body: 'Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.',\r\n      //         info: 'Test blog 1 Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.'\r\n      //       },\r\n      //       {\r\n      //         position: 2,\r\n      //         title: 'Test Blog 2',\r\n      //         body: 'Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.',\r\n      //         info: 'Test blog 1 Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.'\r\n      //       },\r\n      //       {\r\n      //         position: 3,\r\n      //         title: 'Test Blog 3',\r\n      //         body: 'Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.',\r\n      //         info: 'Test blog 1 Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.'\r\n      //       }\r\n      //     ]\r\n      //   },\r\n      //   {\r\n      //     items: [\r\n      //       {\r\n      //         position: 4,\r\n      //         title: 'Test Blog 4',\r\n      //         body: 'Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.',\r\n      //         info: 'Test blog 1 Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.'\r\n      //       },\r\n      //       {\r\n      //         position: 5,\r\n      //         title: 'Test Blog 5',\r\n      //         body: 'Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.',\r\n      //         info: 'Test blog 1 Lorem ipsum dolor sit amet conse ctetur, adipi sicing elit. Nisi sapiente hic fugiat delectus dicta delectus dicta.'\r\n      //       }\r\n      //     ]\r\n      //   }\r\n      // ];\r\n\r\n      // this.setState({ blogs: this.blogs });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <BlogItemList blogs={this.state.blogs} />\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default BodyContainer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport BodyContainer from './Components/BodyComponent';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (<BodyContainer />);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}